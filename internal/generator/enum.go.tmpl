// Code generated by enum generator; DO NOT EDIT.
package {{.Package}}

import (
	"fmt"

	"database/sql/driver"
	{{- if .LowerCase | not }}
	"strings"
	{{- end}}
)

// {{.Type | title}} is the exported type for the enum
type {{.Type | title}} struct {
	name  string
	value int
}

func (e {{.Type | title}}) String() string { return e.name }

// MarshalText implements encoding.TextMarshaler
func (e {{.Type | title}}) MarshalText() ([]byte, error) {
	return []byte(e.name), nil
}

// UnmarshalText implements encoding.TextUnmarshaler
func (e *{{.Type | title}}) UnmarshalText(text []byte) error {
	var err error
	*e, err = Parse{{.Type | title}}(string(text))
	return err
}

// Value implements the driver.Valuer interface
func (e {{.Type | title}}) Value() (driver.Value, error) {
	return e.name, nil
}

// Scan implements the sql.Scanner interface
func (e *{{.Type | title}}) Scan(value interface{}) error {
	if value == nil {
		*e = {{.Type | title}}Values()[0]
		return nil
	}

	str, ok := value.(string)
	if !ok {
		if b, ok := value.([]byte); ok {
			str = string(b)
		} else {
			return fmt.Errorf("invalid {{.Type}} value: %v", value)
		}
	}

	val, err := Parse{{.Type | title}}(str)
	if err != nil {
		return err
	}

	*e = val
	return nil
}

// Parse{{.Type | title}} converts string to {{.Type}} enum value
func Parse{{.Type | title}}(v string) ({{.Type | title}}, error) {
{{if .LowerCase}}
	switch v {
	{{range .Values -}}
	case "{{.Name | ToLower}}":
		return {{.PublicName}}, nil
	{{end}}
	}
{{else}}
	switch strings.ToLower(v) {
	{{range .Values -}}
	case strings.ToLower("{{.Name}}"):
		return {{.PublicName}}, nil
	{{end}}
	}
{{end}}
	return {{.Type | title}}{}, fmt.Errorf("invalid {{.Type}}: %s", v)
}

// Must{{.Type | title}} is like Parse{{.Type | title}} but panics if string is invalid
func Must{{.Type | title}}(v string) {{.Type | title}} {
	r, err := Parse{{.Type | title}}(v)
	if err != nil {
		panic(err)
	}
	return r
}

{{if .GenerateGetter -}}
// Get{{.Type | title}}ByID gets the correspondent {{.Type}} enum value by its ID (raw integer value)
func Get{{.Type | title}}ByID(v int) ({{.Type | title}}, error) {
	switch v {
	{{range .Values -}}
	case {{.Index}}:
		return {{.PublicName}}, nil
	{{end -}}
	}
	return {{.Type | title}}{}, fmt.Errorf("invalid {{.Type}} value: %d", v)
}
{{end -}}

// Public constants for {{.Type}} values
var (
{{range .Values -}}
	{{.PublicName}} = {{$.Type | title}}{name: "{{if $.LowerCase}}{{.Name | ToLower}}{{else}}{{.Name}}{{end}}", value: {{.Index}}}
{{end -}}
)

// {{.Type | title}}Values returns all possible enum values
func {{.Type | title}}Values() []{{.Type | title}} {
	return []{{.Type | title}}{
	{{range .Values -}}
		{{.PublicName}},
	{{end -}}
	}
}

// {{.Type | title}}Names returns all possible enum names
func {{.Type | title}}Names() []string {
	return []string{
	{{range .Values -}}
		"{{if $.LowerCase}}{{.Name | ToLower}}{{else}}{{.Name}}{{end}}",
	{{end -}}
	}
}