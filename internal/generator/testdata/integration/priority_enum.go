// Code generated by enum generator; DO NOT EDIT.
package integration

import (
	"database/sql/driver"
	"fmt"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/bsontype"
	"gopkg.in/yaml.v3"
	"strings"
)

// Priority is the exported type for the enum
type Priority struct {
	name  string
	value int32
}

func (e Priority) String() string { return e.name }

// Index returns the underlying integer value
func (e Priority) Index() int32 { return e.value }

// MarshalText implements encoding.TextMarshaler
func (e Priority) MarshalText() ([]byte, error) {
	return []byte(e.name), nil
}

// UnmarshalText implements encoding.TextUnmarshaler
func (e *Priority) UnmarshalText(text []byte) error {
	var err error
	*e, err = ParsePriority(string(text))
	return err
}

// Value implements the driver.Valuer interface
func (e Priority) Value() (driver.Value, error) {
	return e.name, nil
}

// Scan implements the sql.Scanner interface
func (e *Priority) Scan(value interface{}) error {
	if value == nil {
		// try to find zero value
		for _, v := range PriorityValues {
			if v.Index() == 0 {
				*e = v
				return nil
			}
		}
		// no zero value found, return error
		return fmt.Errorf("cannot scan nil into Priority: no zero value defined")
	}

	str, ok := value.(string)
	if !ok {
		if b, ok := value.([]byte); ok {
			str = string(b)
		} else {
			return fmt.Errorf("invalid priority value: %v", value)
		}
	}

	val, err := ParsePriority(str)
	if err != nil {
		return err
	}

	*e = val
	return nil
}

// MarshalBSONValue implements bson.ValueMarshaler and encodes the enum as a string
func (e Priority) MarshalBSONValue() (bsontype.Type, []byte, error) {
	return bson.MarshalValue(e.String())
}

// UnmarshalBSONValue implements bson.ValueUnmarshaler and decodes the enum from a string
func (e *Priority) UnmarshalBSONValue(t bsontype.Type, data []byte) error {
	var s string
	if err := bson.UnmarshalValue(t, data, &s); err != nil {
		return err
	}
	val, err := ParsePriority(s)
	if err != nil {
		return err
	}
	*e = val
	return nil
}

// MarshalYAML implements yaml.Marshaler and encodes the enum as a string
func (e Priority) MarshalYAML() (any, error) {
	return e.String(), nil
}

// UnmarshalYAML implements yaml.Unmarshaler and decodes the enum from a string scalar
func (e *Priority) UnmarshalYAML(value *yaml.Node) error {
	if value == nil || value.Kind != yaml.ScalarNode {
		return fmt.Errorf("invalid YAML for priority: expected scalar string")
	}
	val, err := ParsePriority(value.Value)
	if err != nil {
		return err
	}
	*e = val
	return nil
}

// _priorityParseMap is used for efficient string to enum conversion
var _priorityParseMap = map[string]Priority{
	"none":     PriorityNone,
	"low":      PriorityLow,
	"medium":   PriorityMedium,
	"high":     PriorityHigh,
	"critical": PriorityCritical,
}

// ParsePriority converts string to priority enum value
func ParsePriority(v string) (Priority, error) {

	if val, ok := _priorityParseMap[strings.ToLower(v)]; ok {
		return val, nil
	}

	return Priority{}, fmt.Errorf("invalid priority: %s", v)
}

// MustPriority is like ParsePriority but panics if string is invalid
func MustPriority(v string) Priority {
	r, err := ParsePriority(v)
	if err != nil {
		panic(err)
	}
	return r
}

// Public constants for priority values
var (
	PriorityNone     = Priority{name: "None", value: -1}
	PriorityLow      = Priority{name: "Low", value: 0}
	PriorityMedium   = Priority{name: "Medium", value: 100}
	PriorityHigh     = Priority{name: "High", value: 1000}
	PriorityCritical = Priority{name: "Critical", value: 999999}
)

// PriorityValues contains all possible enum values
var PriorityValues = []Priority{
	PriorityNone,
	PriorityLow,
	PriorityMedium,
	PriorityHigh,
	PriorityCritical,
}

// PriorityNames contains all possible enum names
var PriorityNames = []string{
	"None",
	"Low",
	"Medium",
	"High",
	"Critical",
}

// PriorityIter returns a function compatible with Go 1.23's range-over-func syntax.
// It yields all Priority values in declaration order. Example:
//
//	for v := range PriorityIter() {
//	    // use v
//	}
func PriorityIter() func(yield func(Priority) bool) {
	return func(yield func(Priority) bool) {
		for _, v := range PriorityValues {
			if !yield(v) {
				break
			}
		}
	}
}

// These variables are used to prevent the compiler from reporting unused errors
// for the original enum constants. They are intentionally placed in a var block
// that is compiled away by the Go compiler.
var _ = func() bool {
	var _ priority = priority(0)
	// This avoids "defined but not used" linter error for priorityNone
	var _ priority = priorityNone
	// This avoids "defined but not used" linter error for priorityLow
	var _ priority = priorityLow
	// This avoids "defined but not used" linter error for priorityMedium
	var _ priority = priorityMedium
	// This avoids "defined but not used" linter error for priorityHigh
	var _ priority = priorityHigh
	// This avoids "defined but not used" linter error for priorityCritical
	var _ priority = priorityCritical
	return true
}()
