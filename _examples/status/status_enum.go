// Code generated by enum generator; DO NOT EDIT.
package status

import (
	"database/sql/driver"
	"fmt"
)

// Status is the exported type for the enum
type Status struct {
	name  string
	value uint8
}

func (e Status) String() string { return e.name }

// Index returns the underlying integer value
func (e Status) Index() uint8 { return e.value }

// MarshalText implements encoding.TextMarshaler
func (e Status) MarshalText() ([]byte, error) {
	return []byte(e.name), nil
}

// UnmarshalText implements encoding.TextUnmarshaler
func (e *Status) UnmarshalText(text []byte) error {
	var err error
	*e, err = ParseStatus(string(text))
	return err
}

// Value implements the driver.Valuer interface
func (e Status) Value() (driver.Value, error) {
	return e.name, nil
}

// Scan implements the sql.Scanner interface
func (e *Status) Scan(value interface{}) error {
	if value == nil {
		// try to find zero value
		for _, v := range StatusValues {
			if v.Index() == 0 {
				*e = v
				return nil
			}
		}
		// no zero value found, return error
		return fmt.Errorf("cannot scan nil into Status: no zero value defined")
	}

	str, ok := value.(string)
	if !ok {
		if b, ok := value.([]byte); ok {
			str = string(b)
		} else {
			return fmt.Errorf("invalid status value: %v", value)
		}
	}

	val, err := ParseStatus(str)
	if err != nil {
		return err
	}

	*e = val
	return nil
}

// _statusParseMap is used for efficient string to enum conversion
var _statusParseMap = map[string]Status{
	"unknown":  StatusUnknown,
	"active":   StatusActive,
	"inactive": StatusInactive,
	"blocked":  StatusBlocked,
}

// ParseStatus converts string to status enum value
func ParseStatus(v string) (Status, error) {

	if val, ok := _statusParseMap[v]; ok {
		return val, nil
	}

	return Status{}, fmt.Errorf("invalid status: %s", v)
}

// MustStatus is like ParseStatus but panics if string is invalid
func MustStatus(v string) Status {
	r, err := ParseStatus(v)
	if err != nil {
		panic(err)
	}
	return r
}

// Public constants for status values
var (
	StatusUnknown  = Status{name: "unknown", value: 0}
	StatusActive   = Status{name: "active", value: 1}
	StatusInactive = Status{name: "inactive", value: 2}
	StatusBlocked  = Status{name: "blocked", value: 3}
)

// StatusValues contains all possible enum values
var StatusValues = []Status{
	StatusUnknown,
	StatusActive,
	StatusInactive,
	StatusBlocked,
}

// StatusNames contains all possible enum names
var StatusNames = []string{
	"unknown",
	"active",
	"inactive",
	"blocked",
}

// StatusIter returns a function compatible with Go 1.23's range-over-func syntax.
// It yields all Status values in declaration order. Example:
//
//	for v := range StatusIter() {
//	    // use v
//	}
func StatusIter() func(yield func(Status) bool) {
	return func(yield func(Status) bool) {
		for _, v := range StatusValues {
			if !yield(v) {
				break
			}
		}
	}
}

// These variables are used to prevent the compiler from reporting unused errors
// for the original enum constants. They are intentionally placed in a var block
// that is compiled away by the Go compiler.
var _ = func() bool {
	var _ status = status(0)
	// This avoids "defined but not used" linter error for statusUnknown
	var _ status = statusUnknown
	// This avoids "defined but not used" linter error for statusActive
	var _ status = statusActive
	// This avoids "defined but not used" linter error for statusInactive
	var _ status = statusInactive
	// This avoids "defined but not used" linter error for statusBlocked
	var _ status = statusBlocked
	return true
}()
